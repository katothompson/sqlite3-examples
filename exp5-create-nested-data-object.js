var sqlite3 = require('sqlite3').verbose()
var db = new sqlite3.Database(':memory:') //creates db in memory, doesn't save it.

var numtasks = 10;
var workers = ['Larry', 'Moe', 'Curly']
var data = [];

db.serialize(function () { 
      // create task table and add numtasks
      db.run('CREATE TABLE task (name TEXT, complete INTEGER)')
      var createtask = db.prepare('INSERT INTO task VALUES (?,?)')
      for (var i = 1; i <= numtasks; i++) {
            createtask.run('task ' + i, 0)
      }
      createtask.finalize();

      // create worker table and add workers
      db.run('CREATE TABLE worker (name TEXT)')
      var createworker = db.prepare('INSERT INTO worker VALUES (?)')
      for (var i = 0; i < workers.length; i++ ) {
            db.run('INSERT INTO worker VALUES (?)', [workers[i]])
      }
      createworker.finalize()

      // create taskworker table and add workers to each task
      db.run('CREATE TABLE taskworker (taskId INTEGER, workerId INTEGER, complete INTEGER )')
      var createtaskworker = db.prepare('INSERT INTO taskworker VALUES (?,?,0)')
      for ( i = 1; i <= numtasks; i++) {
            for (j = 1; j <= workers.length; j++) {
                  createtaskworker.run(i,j)
            }
      }
      createtaskworker.finalize();

      db.each('SELECT rowid FROM workertask', function(err, row){
            console.log(row);
      })

      // query db and store results object in data

      db.each('SELECT rowid AS id, name, complete FROM task', function(err, trow){
            var workerobjects = [];
            db.serialize(function(){
                  db.each('SELECT rowid AS id, name FROM worker WHERE rowid IN (SELECT workerId FROM taskworker WHERE taskId == ?)', [trow.id],function(err, wrow){
                        db.serialize(function() {
                              db.each('SELECT * FROM taskworker WHERE taskId == ? AND workerId == ?', [ trow.id, wrow.id], function(err, twrow) {
                                    wrow.complete = twrow.complete;
                              }, function(err, num) {
                                    workerobjects.push(wrow);
                                    if(data.length == numtasks && data[data.length-1].workers.length == workers.length) {
                                          //console.log(data)
                                          var str = JSON.stringify(data, null, 4);
                                          console.log(str);
                                    }
                              }) 

                        })
                        
                  }, function(err, num){
                        trow.workers = workerobjects;
                        data.push(trow);
                  } )
            })          
      })
})

//create server
var http = require('http');
var server = http.createServer();
server.listen(8080, ()=>{console.log("Server listening on port 8080");});

process.on('SIGINT', () => { //closes db when node receives SIGINT signal. SIGINT is generated by ctrl-c on all platforms
      console.log('closing server on 8080')
      db.close();
      server.close();
  });
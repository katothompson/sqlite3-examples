var sqlite3 = require('sqlite3').verbose()
var db = new sqlite3.Database(':memory:') //creates db in memory, doesn't save it.

var numtasks = 10;
var workers = ['Larry', 'Moe', 'Curly']
var data = [];


db.serialize(function () { 
      
      // create task table and add numtasks
      db.run('CREATE TABLE task (name TEXT, complete INTEGER)')
      var createtask = db.prepare('INSERT INTO task VALUES (?,?)')
      for (var i = 1; i <= numtasks; i++) {
            createtask.run('task ' + i, 0)
      }
      createtask.finalize();

      // create worker table and add workers
      db.run('CREATE TABLE worker (name TEXT)')
      var createworker = db.prepare('INSERT INTO worker VALUES (?)')
      for (var i = 0; i < workers.length; i++ ) {
            db.run('INSERT INTO worker VALUES (?)', [workers[i]])
      }
      createworker.finalize()

      // create taskworker table and add workers to each task
      db.run('CREATE TABLE taskworker (taskId INTEGER, workerId INTEGER, complete INTEGER )')
      var createtaskworker = db.prepare('INSERT INTO taskworker VALUES (?,?,0)')
      for ( i = 1; i <= numtasks; i++) {
            for (j = 1; j <= workers.length; j++) {
                  createtaskworker.run(i,j)
            }
      }
      createtaskworker.finalize();

      // create view of taskworker that includes name from worker
      // from docs: The CREATE VIEW command assigns a name to a pre-packaged SELECT statement. 
      // Once the view is created, it can be used in the FROM clause of another SELECT in place of a table name.
      // Here we create a view that has all of the info from the taskworker table plus the name info from the worker table.
      // This helps simplify the final query.

      db.run('CREATE VIEW twwview AS SELECT t.*, w.* FROM taskworker t, worker w WHERE workerId = w.rowid')

      // return array of tasks that includes workers from twwview

      var thenumberofselectedrows;

      db.each('SELECT rowid, name, complete FROM task', 
      function(err, row) {
            db.all('SELECT * FROM twwview WHERE taskId = ?', [row.rowid], function(err, rows) {
                  row.workers = rows
                  //console.log(row)
                  data.push(row)
                  // the number of selected rows is returned in the complete function. 
                  // if data is as long as the number of selected rows, we know we have them all!
                  if( data.length === thenumberofselectedrows ) {
                        var str = JSON.stringify(data, null, 4);
                        console.log(str);
                  }    
            })
      }, 
      function(err, num) {
            thenumberofselectedrows = num; 
      })



})

//create server
var http = require('http');
var server = http.createServer();
server.listen(8080, ()=>{console.log("Server listening on port 8080");});

process.on('SIGINT', () => { //closes db when node receives SIGINT signal. SIGINT is generated by ctrl-c on all platforms
      console.log('closing server on 8080')
      db.close();
      server.close();
  });
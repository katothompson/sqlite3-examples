// after installing sqlite3, require sqlite3 and create a new database object named db

var sqlite3 = require('sqlite3').verbose(); 
var db = new sqlite3.Database(':memory:');      //creates a new db object and opens it. This creates in-memory db that won't persist.
// var db = new sqlite3.Database(filename, [mode], callback) // for creating db that will persist.

// .serialize method sets execution mode to sequential. The default is parallel.
// watchout -- db methods inside of callbacks will be executed in parallel unless they are also wrapped in db.serialize()

// db.serialize() // Another option. Method with no parameter makes serialize setting sticky, 
                  // so will apply until .parallelize called, even in callback function.

db.serialize(function() {     

      // a list of the database object methods can be found here https://github.com/mapbox/node-sqlite3/wiki/API

  db.run("CREATE TABLE lorem (info TEXT)");
 
  var stmt = db.prepare("INSERT INTO lorem VALUES (?)");
  for (var i = 0; i < 10; i++) {
      stmt.run("Ipsum " + i);
  }
  stmt.finalize();
 
  db.each("SELECT rowid AS id, info FROM lorem", function(err, row) {
      console.log(row.id + ": " + row.info);
  });

  db.all("SELECT * FROM lorem", function(err, rows) {
      
      console.log(rows)

      // methods here in callback function run in parallel 
      // and the database may attempt to insert the value  "bar" before the table "foo" is created,
      // resulting in error
      
      // db.run('CREATE TABLE foo (info TEXT)')
      // db.run('INSERT INTO foo VALUES ("bar")')

      // so wrap the methods in db.serialize again:
      db.serialize(function() {
            console.log('inside callback function now')
            db.run('CREATE TABLE foo (info TEXT)')
            db.run('INSERT INTO foo VALUES ("bar")')
      })
      
  })

  console.log('outside the db.all method')

  db.all('SELECT * from lorem', function(err, rows) {
        console.log('inside db.all')
  })

  // methods here run before the methods in the callback, so table foo does not exist yet and the following will result in error.

  //db.run('INSERT INTO foo VALUES ("another bar")') //this will not work

  // after a timeout, the table has been created and another bar can be inserted.
  setTimeout(function() {
      db.run('INSERT INTO foo VALUES ("another bar")')
      db.all('SELECT * FROM foo', function(err, rows) {
            console.log(rows)
      })
  }, 3000)


});
 
//create server
var http = require('http');
var server = http.createServer();
server.listen(8080, ()=>{console.log("Server listening on port 8080");});

process.on('SIGINT', () => { //closes db when node receives SIGINT signal. SIGINT is generated by ctrl-c on all platforms
      console.log('closing server on 8080')
      db.close();
      server.close();
});

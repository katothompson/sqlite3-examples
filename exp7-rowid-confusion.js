var sqlite3 = require('sqlite3').verbose()
var db = new sqlite3.Database(':memory:') //creates db in memory, doesn't save it.

var numtasks = 10;
var workers = ['Larry', 'Moe', 'Curly']

// select * does not return rowid 

db.serialize(function () { 
      // create task table
      db.run('CREATE TABLE task (name TEXT, complete INTEGER)')

      // use run method for queries that don't return rows, i.e. CREATE, INSERT, UPDATE etc.
      db.run('INSERT INTO task VALUES ("Big Task", 0)')

      // check to see if inserted..
      db.all('SELECT rowid, * FROM task', function(err, rows) {
            console.log(rows)
      })

      // Use placeholders to insert tasks
      for (var i = 1; i <= numtasks; i++) {
            db.run('INSERT INTO task VALUES (?,?)', ['task '+ i, 0])
      }

      // create worker table and add workers
      db.run('CREATE TABLE worker (name TEXT)')
      for (var i = 0; i < workers.length; i++ ) {
            db.run('INSERT INTO worker VALUES (?)', [workers[i]])
      }

      // create taskworker table and add workers to each task
      db.run('CREATE TABLE taskworker (taskId INTEGER, workerId INTEGER, complete INTEGER )')

      for ( i = 1; i <= numtasks; i++) {
            for (j = 1; j <= workers.length; j++) {
                  db.run('INSERT INTO taskworker VALUES (?,?,0)', [i,j])
            }
      }

      // log task, worker, and taskworker tables

      db.all('SELECT rowid AS taskId, * FROM task', function(err, rows) {
            console.log(rows)
      })

      db.all('SELECT rowid AS workerId, * FROM worker', function(err, rows) {
            console.log(rows)
      })

      db.all('SELECT rowid, * FROM taskworker', function(err, rows) {
            console.log(rows)
      })

})

//create server
var http = require('http');
var server = http.createServer();
server.listen(8080, ()=>{console.log("Server listening on port 8080");});

process.on('SIGINT', () => { //closes db when node receives SIGINT signal. SIGINT is generated by ctrl-c on all platforms
      console.log('closing server on 8080')
      db.close();
      server.close();
  });